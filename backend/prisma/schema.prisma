generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum Status {
  AWAITINGPAYMENT
  PROCESSING
  PACKED
  OUTFORDELIVERY
  DELIVERED
  COMPLETED
  CANCELED
}

model User {
  id                String     @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String     @unique
  passwordHash      String
  username          String     @unique
  birthDate         DateTime?
  adress            String?
  billingAdress     String?
  phoneNumber       String?
  profilePictureUrl String?
  registrationDate  DateTime   @default(now())
  isActive          Boolean    @default(true)
  lastLogIn         DateTime?
  role              Role       @default(GUEST)
  Cart              Cart[]
  Order             Order[]
  Review            Review[]
  WishList          WishList[]
}

model Product {
  id                   String            @id @default(cuid())
  name                 String
  description          String
  price                Int
  pictureUrl           String?
  morePictureUrl       String[]
  quantity             Int
  rating               Float?
  ageRecommendationMin Int?
  ageRecommendationMax Int?
  playersNumberMin     Int?
  playersNumberMax     Int?
  longDescriptionHU    String?
  longDescriptionEN    String            @default("Bag stretch chase imaginary bugs rub face on everything behind the couch give attitude swat at dog intently stare at the same spot claw drapes need to chase tail, hide when guests come over attack feet make muffins lick butt leave dead animals as gifts destroy couch. Give attitude swat at dog flop over rub face on everything hide when guests come over intrigued by the shower chase imaginary bugs attack feet need to chase tail behind the couch make muffins intently sniff hand why must they do that, destroy couch bag stretch hopped up on goofballs leave dead animals as gifts intently stare at the same spot lick butt claw drapes hunt anything that moves hopped up on goofballs.S")
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  categoryProduct      CategoryProduct[]
  isDeleted            Boolean           @default(false)
  CartItem             CartItem[]
  OrderItem            OrderItem[]
  Review               Review[]
  WishListItem         WishListItem[]
  Discount             Discount[]
}

//előrendelés, kifutott termék? 

model Category {
  id              String            @id @default(cuid())
  name            String
  description     String
  pictureUrl      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  categoryProduct CategoryProduct[]
}

model CategoryProduct {
  id         String   @id @default(cuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  products  CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  products      OrderItem[]
  paymentId     String?
  totalPrice    Int
  status        Status      @default(AWAITINGPAYMENT)
  createdAt     DateTime    @default(now())
  adress        String?
  billingAdress String?
  phoneNumber   String?
  orderNotes    String?
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  review    String?
  rating    Int
  createdAt DateTime @default(now())
}

model WishList {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  products  WishListItem[]
  createdAt DateTime       @default(now())
}

model WishListItem {
  id         String   @id @default(cuid())
  wishListId String
  wishList   WishList @relation(fields: [wishListId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
}

model Discount {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  percentage Float
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
}

model Coupon {
  id        String   @id @default(cuid())
  code      String
  discount  Int
  validFrom DateTime
  validTo   DateTime
  isActive  Boolean  @default(true)
}
